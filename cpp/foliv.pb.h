// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foliv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_foliv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_foliv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_foliv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_foliv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_foliv_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_foliv_2eproto_metadata_getter(int index);
namespace foliv {
class Foliv;
struct FolivDefaultTypeInternal;
extern FolivDefaultTypeInternal _Foliv_default_instance_;
}  // namespace foliv
PROTOBUF_NAMESPACE_OPEN
template<> ::foliv::Foliv* Arena::CreateMaybeMessage<::foliv::Foliv>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace foliv {

enum Command : int {
  Empty = 0,
  Connect = 1,
  Associate = 3,
  Mux = 127,
  Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Command_IsValid(int value);
constexpr Command Command_MIN = Empty;
constexpr Command Command_MAX = Mux;
constexpr int Command_ARRAYSIZE = Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor();
template<typename T>
inline const std::string& Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_descriptor(), enum_t_value);
}
inline bool Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command>(
    Command_descriptor(), name, value);
}
enum AddressType : int {
  InvalidType = 0,
  IPv4 = 1,
  DomainName = 3,
  IPv6 = 4,
  AddressType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AddressType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AddressType_IsValid(int value);
constexpr AddressType AddressType_MIN = InvalidType;
constexpr AddressType AddressType_MAX = IPv6;
constexpr int AddressType_ARRAYSIZE = AddressType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressType_descriptor();
template<typename T>
inline const std::string& AddressType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AddressType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AddressType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AddressType_descriptor(), enum_t_value);
}
inline bool AddressType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AddressType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AddressType>(
    AddressType_descriptor(), name, value);
}
// ===================================================================

class Foliv PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foliv.Foliv) */ {
 public:
  inline Foliv() : Foliv(nullptr) {}
  virtual ~Foliv();
  explicit constexpr Foliv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Foliv(const Foliv& from);
  Foliv(Foliv&& from) noexcept
    : Foliv() {
    *this = ::std::move(from);
  }

  inline Foliv& operator=(const Foliv& from) {
    CopyFrom(from);
    return *this;
  }
  inline Foliv& operator=(Foliv&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Foliv& default_instance() {
    return *internal_default_instance();
  }
  static inline const Foliv* internal_default_instance() {
    return reinterpret_cast<const Foliv*>(
               &_Foliv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Foliv& a, Foliv& b) {
    a.Swap(&b);
  }
  inline void Swap(Foliv* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Foliv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Foliv* New() const final {
    return CreateMaybeMessage<Foliv>(nullptr);
  }

  Foliv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Foliv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Foliv& from);
  void MergeFrom(const Foliv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Foliv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foliv.Foliv";
  }
  protected:
  explicit Foliv(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_foliv_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserHashFieldNumber = 1,
    kAddressFieldNumber = 4,
    kSourceNameFieldNumber = 6,
    kRouterNameFieldNumber = 7,
    kCommandFieldNumber = 2,
    kAddressTypeFieldNumber = 3,
    kPortFieldNumber = 5,
  };
  // string userHash = 1;
  void clear_userhash();
  const std::string& userhash() const;
  void set_userhash(const std::string& value);
  void set_userhash(std::string&& value);
  void set_userhash(const char* value);
  void set_userhash(const char* value, size_t size);
  std::string* mutable_userhash();
  std::string* release_userhash();
  void set_allocated_userhash(std::string* userhash);
  private:
  const std::string& _internal_userhash() const;
  void _internal_set_userhash(const std::string& value);
  std::string* _internal_mutable_userhash();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string sourceName = 6;
  void clear_sourcename();
  const std::string& sourcename() const;
  void set_sourcename(const std::string& value);
  void set_sourcename(std::string&& value);
  void set_sourcename(const char* value);
  void set_sourcename(const char* value, size_t size);
  std::string* mutable_sourcename();
  std::string* release_sourcename();
  void set_allocated_sourcename(std::string* sourcename);
  private:
  const std::string& _internal_sourcename() const;
  void _internal_set_sourcename(const std::string& value);
  std::string* _internal_mutable_sourcename();
  public:

  // string routerName = 7;
  void clear_routername();
  const std::string& routername() const;
  void set_routername(const std::string& value);
  void set_routername(std::string&& value);
  void set_routername(const char* value);
  void set_routername(const char* value, size_t size);
  std::string* mutable_routername();
  std::string* release_routername();
  void set_allocated_routername(std::string* routername);
  private:
  const std::string& _internal_routername() const;
  void _internal_set_routername(const std::string& value);
  std::string* _internal_mutable_routername();
  public:

  // .foliv.Command command = 2;
  void clear_command();
  ::foliv::Command command() const;
  void set_command(::foliv::Command value);
  private:
  ::foliv::Command _internal_command() const;
  void _internal_set_command(::foliv::Command value);
  public:

  // .foliv.AddressType addressType = 3;
  void clear_addresstype();
  ::foliv::AddressType addresstype() const;
  void set_addresstype(::foliv::AddressType value);
  private:
  ::foliv::AddressType _internal_addresstype() const;
  void _internal_set_addresstype(::foliv::AddressType value);
  public:

  // uint32 port = 5;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:foliv.Foliv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routername_;
  int command_;
  int addresstype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_foliv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Foliv

// string userHash = 1;
inline void Foliv::clear_userhash() {
  userhash_.ClearToEmpty();
}
inline const std::string& Foliv::userhash() const {
  // @@protoc_insertion_point(field_get:foliv.Foliv.userHash)
  return _internal_userhash();
}
inline void Foliv::set_userhash(const std::string& value) {
  _internal_set_userhash(value);
  // @@protoc_insertion_point(field_set:foliv.Foliv.userHash)
}
inline std::string* Foliv::mutable_userhash() {
  // @@protoc_insertion_point(field_mutable:foliv.Foliv.userHash)
  return _internal_mutable_userhash();
}
inline const std::string& Foliv::_internal_userhash() const {
  return userhash_.Get();
}
inline void Foliv::_internal_set_userhash(const std::string& value) {
  
  userhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Foliv::set_userhash(std::string&& value) {
  
  userhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:foliv.Foliv.userHash)
}
inline void Foliv::set_userhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:foliv.Foliv.userHash)
}
inline void Foliv::set_userhash(const char* value,
    size_t size) {
  
  userhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:foliv.Foliv.userHash)
}
inline std::string* Foliv::_internal_mutable_userhash() {
  
  return userhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Foliv::release_userhash() {
  // @@protoc_insertion_point(field_release:foliv.Foliv.userHash)
  return userhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Foliv::set_allocated_userhash(std::string* userhash) {
  if (userhash != nullptr) {
    
  } else {
    
  }
  userhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:foliv.Foliv.userHash)
}

// .foliv.Command command = 2;
inline void Foliv::clear_command() {
  command_ = 0;
}
inline ::foliv::Command Foliv::_internal_command() const {
  return static_cast< ::foliv::Command >(command_);
}
inline ::foliv::Command Foliv::command() const {
  // @@protoc_insertion_point(field_get:foliv.Foliv.command)
  return _internal_command();
}
inline void Foliv::_internal_set_command(::foliv::Command value) {
  
  command_ = value;
}
inline void Foliv::set_command(::foliv::Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:foliv.Foliv.command)
}

// .foliv.AddressType addressType = 3;
inline void Foliv::clear_addresstype() {
  addresstype_ = 0;
}
inline ::foliv::AddressType Foliv::_internal_addresstype() const {
  return static_cast< ::foliv::AddressType >(addresstype_);
}
inline ::foliv::AddressType Foliv::addresstype() const {
  // @@protoc_insertion_point(field_get:foliv.Foliv.addressType)
  return _internal_addresstype();
}
inline void Foliv::_internal_set_addresstype(::foliv::AddressType value) {
  
  addresstype_ = value;
}
inline void Foliv::set_addresstype(::foliv::AddressType value) {
  _internal_set_addresstype(value);
  // @@protoc_insertion_point(field_set:foliv.Foliv.addressType)
}

// string address = 4;
inline void Foliv::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& Foliv::address() const {
  // @@protoc_insertion_point(field_get:foliv.Foliv.address)
  return _internal_address();
}
inline void Foliv::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:foliv.Foliv.address)
}
inline std::string* Foliv::mutable_address() {
  // @@protoc_insertion_point(field_mutable:foliv.Foliv.address)
  return _internal_mutable_address();
}
inline const std::string& Foliv::_internal_address() const {
  return address_.Get();
}
inline void Foliv::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Foliv::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:foliv.Foliv.address)
}
inline void Foliv::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:foliv.Foliv.address)
}
inline void Foliv::set_address(const char* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:foliv.Foliv.address)
}
inline std::string* Foliv::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Foliv::release_address() {
  // @@protoc_insertion_point(field_release:foliv.Foliv.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Foliv::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:foliv.Foliv.address)
}

// uint32 port = 5;
inline void Foliv::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Foliv::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Foliv::port() const {
  // @@protoc_insertion_point(field_get:foliv.Foliv.port)
  return _internal_port();
}
inline void Foliv::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void Foliv::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:foliv.Foliv.port)
}

// string sourceName = 6;
inline void Foliv::clear_sourcename() {
  sourcename_.ClearToEmpty();
}
inline const std::string& Foliv::sourcename() const {
  // @@protoc_insertion_point(field_get:foliv.Foliv.sourceName)
  return _internal_sourcename();
}
inline void Foliv::set_sourcename(const std::string& value) {
  _internal_set_sourcename(value);
  // @@protoc_insertion_point(field_set:foliv.Foliv.sourceName)
}
inline std::string* Foliv::mutable_sourcename() {
  // @@protoc_insertion_point(field_mutable:foliv.Foliv.sourceName)
  return _internal_mutable_sourcename();
}
inline const std::string& Foliv::_internal_sourcename() const {
  return sourcename_.Get();
}
inline void Foliv::_internal_set_sourcename(const std::string& value) {
  
  sourcename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Foliv::set_sourcename(std::string&& value) {
  
  sourcename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:foliv.Foliv.sourceName)
}
inline void Foliv::set_sourcename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:foliv.Foliv.sourceName)
}
inline void Foliv::set_sourcename(const char* value,
    size_t size) {
  
  sourcename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:foliv.Foliv.sourceName)
}
inline std::string* Foliv::_internal_mutable_sourcename() {
  
  return sourcename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Foliv::release_sourcename() {
  // @@protoc_insertion_point(field_release:foliv.Foliv.sourceName)
  return sourcename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Foliv::set_allocated_sourcename(std::string* sourcename) {
  if (sourcename != nullptr) {
    
  } else {
    
  }
  sourcename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:foliv.Foliv.sourceName)
}

// string routerName = 7;
inline void Foliv::clear_routername() {
  routername_.ClearToEmpty();
}
inline const std::string& Foliv::routername() const {
  // @@protoc_insertion_point(field_get:foliv.Foliv.routerName)
  return _internal_routername();
}
inline void Foliv::set_routername(const std::string& value) {
  _internal_set_routername(value);
  // @@protoc_insertion_point(field_set:foliv.Foliv.routerName)
}
inline std::string* Foliv::mutable_routername() {
  // @@protoc_insertion_point(field_mutable:foliv.Foliv.routerName)
  return _internal_mutable_routername();
}
inline const std::string& Foliv::_internal_routername() const {
  return routername_.Get();
}
inline void Foliv::_internal_set_routername(const std::string& value) {
  
  routername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Foliv::set_routername(std::string&& value) {
  
  routername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:foliv.Foliv.routerName)
}
inline void Foliv::set_routername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  routername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:foliv.Foliv.routerName)
}
inline void Foliv::set_routername(const char* value,
    size_t size) {
  
  routername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:foliv.Foliv.routerName)
}
inline std::string* Foliv::_internal_mutable_routername() {
  
  return routername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Foliv::release_routername() {
  // @@protoc_insertion_point(field_release:foliv.Foliv.routerName)
  return routername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Foliv::set_allocated_routername(std::string* routername) {
  if (routername != nullptr) {
    
  } else {
    
  }
  routername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:foliv.Foliv.routerName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foliv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::foliv::Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::foliv::Command>() {
  return ::foliv::Command_descriptor();
}
template <> struct is_proto_enum< ::foliv::AddressType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::foliv::AddressType>() {
  return ::foliv::AddressType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_foliv_2eproto
