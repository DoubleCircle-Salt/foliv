// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: foliv.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Foliv {

  /// <summary>Holder for reflection information generated from foliv.proto</summary>
  public static partial class FolivReflection {

    #region Descriptor
    /// <summary>File descriptor for foliv.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FolivReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtmb2xpdi5wcm90bxIFZm9saXYi9gEKBUZvbGl2EhAKCHVzZXJIYXNoGAEg",
            "ASgJEh8KB2NvbW1hbmQYAiABKA4yDi5mb2xpdi5Db21tYW5kEicKC2FkZHJl",
            "c3NUeXBlGAMgASgOMhIuZm9saXYuQWRkcmVzc1R5cGUSDwoHYWRkcmVzcxgE",
            "IAEoDBIMCgRwb3J0GAUgASgNEhIKCnNvdXJjZU5hbWUYBiABKAkSEgoKcm91",
            "dGVyTmFtZRgHIAEoCRITCgtwcm9jZXNzTmFtZRgIIAEoCRIVCg14Rm9yd2Fy",
            "ZGVkRm9yGAkgAygMEg8KB2lzVG91Y2gYCiABKAgSDQoFbXV4SUQYCyABKA0q",
            "OQoHQ29tbWFuZBIJCgVFbXB0eRAAEgsKB0Nvbm5lY3QQARINCglBc3NvY2lh",
            "dGUQAxIHCgNNdXgQfypCCgtBZGRyZXNzVHlwZRIPCgtJbnZhbGlkVHlwZRAA",
            "EggKBElQdjQQARIOCgpEb21haW5OYW1lEAMSCAoESVB2NhAEQglaBy4vZm9s",
            "aXZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Foliv.Command), typeof(global::Foliv.AddressType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Foliv.Foliv), global::Foliv.Foliv.Parser, new[]{ "UserHash", "Command", "AddressType", "Address", "Port", "SourceName", "RouterName", "ProcessName", "XForwardedFor", "IsTouch", "MuxID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Command {
    [pbr::OriginalName("Empty")] Empty = 0,
    [pbr::OriginalName("Connect")] Connect = 1,
    [pbr::OriginalName("Associate")] Associate = 3,
    [pbr::OriginalName("Mux")] Mux = 127,
  }

  public enum AddressType {
    [pbr::OriginalName("InvalidType")] InvalidType = 0,
    [pbr::OriginalName("IPv4")] Ipv4 = 1,
    [pbr::OriginalName("DomainName")] DomainName = 3,
    [pbr::OriginalName("IPv6")] Ipv6 = 4,
  }

  #endregion

  #region Messages
  public sealed partial class Foliv : pb::IMessage<Foliv>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Foliv> _parser = new pb::MessageParser<Foliv>(() => new Foliv());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Foliv> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Foliv.FolivReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Foliv() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Foliv(Foliv other) : this() {
      userHash_ = other.userHash_;
      command_ = other.command_;
      addressType_ = other.addressType_;
      address_ = other.address_;
      port_ = other.port_;
      sourceName_ = other.sourceName_;
      routerName_ = other.routerName_;
      processName_ = other.processName_;
      xForwardedFor_ = other.xForwardedFor_.Clone();
      isTouch_ = other.isTouch_;
      muxID_ = other.muxID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Foliv Clone() {
      return new Foliv(this);
    }

    /// <summary>Field number for the "userHash" field.</summary>
    public const int UserHashFieldNumber = 1;
    private string userHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserHash {
      get { return userHash_; }
      set {
        userHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private global::Foliv.Command command_ = global::Foliv.Command.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Foliv.Command Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "addressType" field.</summary>
    public const int AddressTypeFieldNumber = 3;
    private global::Foliv.AddressType addressType_ = global::Foliv.AddressType.InvalidType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Foliv.AddressType AddressType {
      get { return addressType_; }
      set {
        addressType_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 4;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "sourceName" field.</summary>
    public const int SourceNameFieldNumber = 6;
    private string sourceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceName {
      get { return sourceName_; }
      set {
        sourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "routerName" field.</summary>
    public const int RouterNameFieldNumber = 7;
    private string routerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RouterName {
      get { return routerName_; }
      set {
        routerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processName" field.</summary>
    public const int ProcessNameFieldNumber = 8;
    private string processName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessName {
      get { return processName_; }
      set {
        processName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "xForwardedFor" field.</summary>
    public const int XForwardedForFieldNumber = 9;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_xForwardedFor_codec
        = pb::FieldCodec.ForBytes(74);
    private readonly pbc::RepeatedField<pb::ByteString> xForwardedFor_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> XForwardedFor {
      get { return xForwardedFor_; }
    }

    /// <summary>Field number for the "isTouch" field.</summary>
    public const int IsTouchFieldNumber = 10;
    private bool isTouch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTouch {
      get { return isTouch_; }
      set {
        isTouch_ = value;
      }
    }

    /// <summary>Field number for the "muxID" field.</summary>
    public const int MuxIDFieldNumber = 11;
    private uint muxID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MuxID {
      get { return muxID_; }
      set {
        muxID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Foliv);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Foliv other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserHash != other.UserHash) return false;
      if (Command != other.Command) return false;
      if (AddressType != other.AddressType) return false;
      if (Address != other.Address) return false;
      if (Port != other.Port) return false;
      if (SourceName != other.SourceName) return false;
      if (RouterName != other.RouterName) return false;
      if (ProcessName != other.ProcessName) return false;
      if(!xForwardedFor_.Equals(other.xForwardedFor_)) return false;
      if (IsTouch != other.IsTouch) return false;
      if (MuxID != other.MuxID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserHash.Length != 0) hash ^= UserHash.GetHashCode();
      if (Command != global::Foliv.Command.Empty) hash ^= Command.GetHashCode();
      if (AddressType != global::Foliv.AddressType.InvalidType) hash ^= AddressType.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (SourceName.Length != 0) hash ^= SourceName.GetHashCode();
      if (RouterName.Length != 0) hash ^= RouterName.GetHashCode();
      if (ProcessName.Length != 0) hash ^= ProcessName.GetHashCode();
      hash ^= xForwardedFor_.GetHashCode();
      if (IsTouch != false) hash ^= IsTouch.GetHashCode();
      if (MuxID != 0) hash ^= MuxID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserHash);
      }
      if (Command != global::Foliv.Command.Empty) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Command);
      }
      if (AddressType != global::Foliv.AddressType.InvalidType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AddressType);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Address);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Port);
      }
      if (SourceName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SourceName);
      }
      if (RouterName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RouterName);
      }
      if (ProcessName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ProcessName);
      }
      xForwardedFor_.WriteTo(output, _repeated_xForwardedFor_codec);
      if (IsTouch != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsTouch);
      }
      if (MuxID != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MuxID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserHash);
      }
      if (Command != global::Foliv.Command.Empty) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Command);
      }
      if (AddressType != global::Foliv.AddressType.InvalidType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AddressType);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Address);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Port);
      }
      if (SourceName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SourceName);
      }
      if (RouterName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RouterName);
      }
      if (ProcessName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ProcessName);
      }
      xForwardedFor_.WriteTo(ref output, _repeated_xForwardedFor_codec);
      if (IsTouch != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsTouch);
      }
      if (MuxID != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MuxID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserHash);
      }
      if (Command != global::Foliv.Command.Empty) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (AddressType != global::Foliv.AddressType.InvalidType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AddressType);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (SourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceName);
      }
      if (RouterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RouterName);
      }
      if (ProcessName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessName);
      }
      size += xForwardedFor_.CalculateSize(_repeated_xForwardedFor_codec);
      if (IsTouch != false) {
        size += 1 + 1;
      }
      if (MuxID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MuxID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Foliv other) {
      if (other == null) {
        return;
      }
      if (other.UserHash.Length != 0) {
        UserHash = other.UserHash;
      }
      if (other.Command != global::Foliv.Command.Empty) {
        Command = other.Command;
      }
      if (other.AddressType != global::Foliv.AddressType.InvalidType) {
        AddressType = other.AddressType;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.SourceName.Length != 0) {
        SourceName = other.SourceName;
      }
      if (other.RouterName.Length != 0) {
        RouterName = other.RouterName;
      }
      if (other.ProcessName.Length != 0) {
        ProcessName = other.ProcessName;
      }
      xForwardedFor_.Add(other.xForwardedFor_);
      if (other.IsTouch != false) {
        IsTouch = other.IsTouch;
      }
      if (other.MuxID != 0) {
        MuxID = other.MuxID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserHash = input.ReadString();
            break;
          }
          case 16: {
            Command = (global::Foliv.Command) input.ReadEnum();
            break;
          }
          case 24: {
            AddressType = (global::Foliv.AddressType) input.ReadEnum();
            break;
          }
          case 34: {
            Address = input.ReadBytes();
            break;
          }
          case 40: {
            Port = input.ReadUInt32();
            break;
          }
          case 50: {
            SourceName = input.ReadString();
            break;
          }
          case 58: {
            RouterName = input.ReadString();
            break;
          }
          case 66: {
            ProcessName = input.ReadString();
            break;
          }
          case 74: {
            xForwardedFor_.AddEntriesFrom(input, _repeated_xForwardedFor_codec);
            break;
          }
          case 80: {
            IsTouch = input.ReadBool();
            break;
          }
          case 88: {
            MuxID = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserHash = input.ReadString();
            break;
          }
          case 16: {
            Command = (global::Foliv.Command) input.ReadEnum();
            break;
          }
          case 24: {
            AddressType = (global::Foliv.AddressType) input.ReadEnum();
            break;
          }
          case 34: {
            Address = input.ReadBytes();
            break;
          }
          case 40: {
            Port = input.ReadUInt32();
            break;
          }
          case 50: {
            SourceName = input.ReadString();
            break;
          }
          case 58: {
            RouterName = input.ReadString();
            break;
          }
          case 66: {
            ProcessName = input.ReadString();
            break;
          }
          case 74: {
            xForwardedFor_.AddEntriesFrom(ref input, _repeated_xForwardedFor_codec);
            break;
          }
          case 80: {
            IsTouch = input.ReadBool();
            break;
          }
          case 88: {
            MuxID = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
