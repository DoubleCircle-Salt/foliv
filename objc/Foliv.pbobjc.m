// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foliv.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Foliv.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FolivRoot

@implementation FolivRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - FolivRoot_FileDescriptor

static GPBFileDescriptor *FolivRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"foliv"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Command

GPBEnumDescriptor *Command_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Empty\000Connect\000Associate\000Mux\000";
    static const int32_t values[] = {
        Command_Empty,
        Command_Connect,
        Command_Associate,
        Command_Mux,
    };
    static const char *extraTextFormatInfo = "\004\000\005\000\001\007\000\002\t\000\003\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Command)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Command_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Command_IsValidValue(int32_t value__) {
  switch (value__) {
    case Command_Empty:
    case Command_Connect:
    case Command_Associate:
    case Command_Mux:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum AddressType

GPBEnumDescriptor *AddressType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InvalidType\000Ipv4\000DomainName\000Ipv6\000";
    static const int32_t values[] = {
        AddressType_InvalidType,
        AddressType_Ipv4,
        AddressType_DomainName,
        AddressType_Ipv6,
    };
    static const char *extraTextFormatInfo = "\004\000\013\000\001b\002\000\002\n\000\003b\002\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AddressType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AddressType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AddressType_IsValidValue(int32_t value__) {
  switch (value__) {
    case AddressType_InvalidType:
    case AddressType_Ipv4:
    case AddressType_DomainName:
    case AddressType_Ipv6:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Foliv

@implementation Foliv

@dynamic userHash;
@dynamic command;
@dynamic addressType;
@dynamic address;
@dynamic port;
@dynamic sourceName;
@dynamic routerName;
@dynamic processName;
@dynamic xForwardedForArray, xForwardedForArray_Count;
@dynamic isTouch;

typedef struct Foliv__storage_ {
  uint32_t _has_storage_[1];
  Command command;
  AddressType addressType;
  uint32_t port;
  NSString *userHash;
  NSData *address;
  NSString *sourceName;
  NSString *routerName;
  NSString *processName;
  NSMutableArray *xForwardedForArray;
} Foliv__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Foliv_FieldNumber_UserHash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Foliv__storage_, userHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "command",
        .dataTypeSpecific.enumDescFunc = Command_EnumDescriptor,
        .number = Foliv_FieldNumber_Command,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Foliv__storage_, command),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "addressType",
        .dataTypeSpecific.enumDescFunc = AddressType_EnumDescriptor,
        .number = Foliv_FieldNumber_AddressType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Foliv__storage_, addressType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = Foliv_FieldNumber_Address,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Foliv__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "port",
        .dataTypeSpecific.clazz = Nil,
        .number = Foliv_FieldNumber_Port,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Foliv__storage_, port),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sourceName",
        .dataTypeSpecific.clazz = Nil,
        .number = Foliv_FieldNumber_SourceName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Foliv__storage_, sourceName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "routerName",
        .dataTypeSpecific.clazz = Nil,
        .number = Foliv_FieldNumber_RouterName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Foliv__storage_, routerName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "processName",
        .dataTypeSpecific.clazz = Nil,
        .number = Foliv_FieldNumber_ProcessName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Foliv__storage_, processName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "xForwardedForArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Foliv_FieldNumber_XForwardedForArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Foliv__storage_, xForwardedForArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "isTouch",
        .dataTypeSpecific.clazz = Nil,
        .number = Foliv_FieldNumber_IsTouch,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Foliv class]
                                     rootClass:[FolivRoot class]
                                          file:FolivRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Foliv__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\010\000\003\013\000\006\n\000\007\n\000\010\013\000\t\000xForwardedFor\000\n\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Foliv_Command_RawValue(Foliv *message) {
  GPBDescriptor *descriptor = [Foliv descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Foliv_FieldNumber_Command];
  return GPBGetMessageRawEnumField(message, field);
}

void SetFoliv_Command_RawValue(Foliv *message, int32_t value) {
  GPBDescriptor *descriptor = [Foliv descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Foliv_FieldNumber_Command];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t Foliv_AddressType_RawValue(Foliv *message) {
  GPBDescriptor *descriptor = [Foliv descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Foliv_FieldNumber_AddressType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetFoliv_AddressType_RawValue(Foliv *message, int32_t value) {
  GPBDescriptor *descriptor = [Foliv descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Foliv_FieldNumber_AddressType];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
